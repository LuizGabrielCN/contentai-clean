import os
import google.generativeai as genai
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

class AIService:
    def __init__(self):
        print("üîÑ Inicializando HelpubliAI Service...")
        
        # Obter chave API do ambiente
        self.api_key = os.environ.get('GEMINI_API_KEY')
        
        # Verificar se a chave existe
        if not self.api_key or self.api_key == 'sua_chave_aqui_cole_a_chave_que_vc_gerou':
            print("‚ö†Ô∏è  AVISO: GEMINI_API_KEY n√£o configurada. Usando modo simulado.")
            self.mode = 'simulated'
            return
        
        try:
            # Configurar API do Google Gemini
            genai.configure(api_key=self.api_key)
            
            # Tentar usar o modelo mais recente
            try:
                self.model = genai.GenerativeModel('gemini-pro')
                self.mode = 'gemini'
                print("‚úÖ Modelo configurado: gemini-pro")
            except Exception as model_error:
                print(f"‚ùå Erro ao configurar modelo: {model_error}")
                self.mode = 'simulated'
                print("üîÅ Usando modo simulado como fallback")
                
        except Exception as e:
            print(f"‚ùå Erro ao configurar Gemini: {e}")
            self.mode = 'simulated'
            print("üîÅ Usando modo simulado como fallback")
    
    def generate_ideas(self, niche, audience, count=5):
        """Gera ideias de conte√∫do"""
        if self.mode == 'simulated':
            print("üîÅ Gerando ideias em modo simulado")
            return self._get_fallback_ideas(niche, audience, count)
        
        try:
            prompt = f"""
            Gere {count} ideias criativas para v√≠deos do TikTok/Instagram Reels no nicho de {niche} 
            para o p√∫blico-alvo de {audience}. 

            REQUISITOS:
            1. Seja criativo e original
            2. Foco em humor e viralidade
            3. T√≠tulos chamativos (m√°ximo 60 caracteres)
            4. Descri√ß√µes claras e objetivas (1-2 linhas)
            5. 3-5 hashtags relevantes

            FORMATO DE RESPOSTA (para cada ideia):
            T√≠tulo: [T√≠tulo criativo]
            Descri√ß√£o: [Descri√ß√£o de 1-2 linhas]
            Hashtags: #[hashtag1] #[hashtag2] #[hashtag3]
            ---
            """
            
            response = self.model.generate_content(prompt)
            ideas = self._parse_ideas_response(response.text, count, niche, audience)
            print(f"‚úÖ {len(ideas)} ideias geradas usando Gemini")
            return ideas
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar ideias: {e}")
            return self._get_fallback_ideas(niche, audience, count)
    
    def generate_script(self, idea):
        """Gera um roteiro baseado em uma ideia"""
        if self.mode == 'simulated':
            print("üîÅ Gerando roteiro em modo simulado")
            return self._get_fallback_script(idea)
        
        try:
            prompt = f"""
            Crie um roteiro COMPLETO para um v√≠deo do TikTok/Instagram Reels baseado nesta ideia:
            "{idea}"

            ESTRUTURA DO ROTEIRO:
            1. T√≠tulo do v√≠deo
            2. Dura√ß√£o total (15-30 segundos)
            3. Cen√°rio/Ambiente
            4. Sequ√™ncia temporal detalhada (ex: 0-3s, 3-8s, etc.)
            5. A√ß√µes e di√°logos para cada momento
            6. Efeitos sonoros sugeridos
            7. Textos para legenda
            8. Transi√ß√µes recomendadas
            9. Hashtags estrat√©gicas

            Seja detalhado e espec√≠fico. Formate a resposta de maneira organizada.
            """
            
            response = self.model.generate_content(prompt)
            print("‚úÖ Roteiro gerado usando Gemini")
            return response.text
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar roteiro: {e}")
            return self._get_fallback_script(idea)
    
    def improve_idea(self, idea, improvement_type="geral"):
        """Melhora uma ideia existente (nova funcionalidade)"""
        if self.mode == 'simulated':
            return {
                "improved_title": f"[Melhorado] {idea}",
                "improved_description": f"Descri√ß√£o aprimorada para: {idea}",
                "improved_hashtags": "#melhorado #conteudo #viral"
            }
        
        try:
            prompt = f"""
            Melhore a seguinte ideia de conte√∫do: "{idea}"
            
            Tipo de melhoria: {improvement_type}
            
            Forne√ßa:
            1. T√≠tulo melhorado (mais atraente)
            2. Descri√ß√£o aprimorada (mais detalhada)
            3. Novas hashtags relevantes (3-5 hashtags)
            
            Formato:
            T√≠tulo: [t√≠tulo melhorado]
            Descri√ß√£o: [descri√ß√£o aprimorada]
            Hashtags: #[hashtag1] #[hashtag2] #[hashtag3]
            """
            
            response = self.model.generate_content(prompt)
            return self._parse_improvement_response(response.text)
            
        except Exception as e:
            print(f"‚ùå Erro ao melhorar ideia: {e}")
            return {
                "improved_title": f"[Melhorado] {idea}",
                "improved_description": f"Descri√ß√£o aprimorada para: {idea}",
                "improved_hashtags": "#melhorado #conteudo #viral"
            }
    
    def _parse_ideas_response(self, response_text, expected_count, niche, audience):
        """Processa a resposta do Gemini"""
        ideas = []
        lines = response_text.split('\n')
        current_idea = {}
        
        for line in lines:
            line = line.strip()
            
            if line.startswith('T√≠tulo:') or line.startswith('Title:'):
                if current_idea:
                    ideas.append(current_idea)
                title = line.split(':', 1)[1].strip()
                current_idea = {'title': title}
            
            elif line.startswith('Descri√ß√£o:') or line.startswith('Description:'):
                if current_idea:
                    current_idea['description'] = line.split(':', 1)[1].strip()
            
            elif line.startswith('Hashtags:'):
                if current_idea:
                    current_idea['hashtags'] = line.split(':', 1)[1].strip()
            
            elif line.startswith('---') and current_idea:
                ideas.append(current_idea)
                current_idea = {}
        
        if current_idea:
            ideas.append(current_idea)
        
        # Completar com ideias fallback se necess√°rio
        while len(ideas) < expected_count:
            ideas.append(self._create_fallback_idea(len(ideas) + 1, niche, audience))
        
        return ideas[:expected_count]
    
    def _parse_improvement_response(self, response_text):
        """Processa resposta de melhoria de ideia"""
        lines = response_text.split('\n')
        result = {
            "improved_title": "",
            "improved_description": "",
            "improved_hashtags": ""
        }
        
        for line in lines:
            line = line.strip()
            if line.startswith('T√≠tulo:'):
                result["improved_title"] = line.split(':', 1)[1].strip()
            elif line.startswith('Descri√ß√£o:'):
                result["improved_description"] = line.split(':', 1)[1].strip()
            elif line.startswith('Hashtags:'):
                result["improved_hashtags"] = line.split(':', 1)[1].strip()
        
        return result
    
    def _create_fallback_idea(self, index, niche, audience):
        """Cria uma ideia de fallback"""
        types = ["Rea√ß√£o engra√ßada", "Desafio divertido", "Top momentos", "Par√≥dia", "Situa√ß√£o c√¥mica"]
        descriptions = [
            "V√≠deo engra√ßado e engaging para seu p√∫blico",
            "Conte√∫do viral que vai fazer sucesso",
            "Ideia criativa para bombar nas redes",
            "Conte√∫do divertido que todos v√£o compartilhar"
        ]
        
        return {
            'title': f'{types[index % len(types)]} de {niche} para {audience}',
            'description': descriptions[index % len(descriptions)],
            'hashtags': f'#{niche} #{audience} #humor #viral #engra√ßado'
        }
    
    def _get_fallback_ideas(self, niche, audience, count):
        """Ideias para quando a API n√£o est√° dispon√≠vel"""
        ideas = []
        for i in range(count):
            ideas.append(self._create_fallback_idea(i, niche, audience))
        print(f"üîÅ Geradas {len(ideas)} ideias em modo simulado")
        return ideas
    
    def _get_fallback_script(self, idea):
        """Roteiro para quando a API n√£o est√° dispon√≠vel"""
        # Extrair poss√≠veis palavras-chave da ideia para usar como hashtags
        keywords = idea.lower().split()[:3]  # Pega as primeiras 3 palavras
        hashtag_keywords = " ".join([f"#{kw}" for kw in keywords if len(kw) > 3])
        
        script = f"""
üìù ROTEIRO DETALHADO PARA: {idea}

‚è∞ DURA√á√ÉO TOTAL: 20-25 segundos

üé¨ CEN√ÅRIO: Ambiente bem iluminado e casual

üéØ P√öBLICO: Jovens e adultos que apreciam humor

‚è±Ô∏è  LINHA DO TEMPO:

[0-5 SEGUNDOS] - GANCHO INICIAL
‚Ä¢ Entrada impactante com express√£o facial exagerada
‚Ä¢ Texto na tela explicando a situa√ß√£o rapidamente
‚Ä¢ Efeito sonoro: "whoosh" ou "ding" para chamar aten√ß√£o

[5-15 SEGUNDOS] - DESENVOLVIMENTO
‚Ä¢ Progress√£o da hist√≥ria com cortes r√°pidos
‚Ä¢ 2-3 takes mostrando diferentes √¢ngulos
‚Ä¢ Mudan√ßas expressivas de rosto e linguagem corporal
‚Ä¢ M√∫sica de fundo: Trend atual do TikTok (30% volume)

[15-22 SEGUNDOS] - CL√çMAX
‚Ä¢ Momento mais engra√ßado da cena
‚Ä¢ Rea√ß√£o exagerada √† situa√ß√£o
‚Ä¢ Texto na tela: "O resultado üëÄ" ou "E ent√£o..."
‚Ä¢ Efeito sonoro: Risadas ou suspense

[22-25 SEGUNDOS] - FINAL E CHAMADA PARA A√á√ÉO
‚Ä¢ Resolu√ß√£o r√°pida e satisfat√≥ria
‚Ä¢ Olhar direto para c√¢mera com sorriso
‚Ä¢ Gestual pedindo like/compartilhamento
‚Ä¢ Texto: "Compartilha se riu! ‚ù§Ô∏è Salva pra ver depois! üíæ"

üè∑Ô∏è  HASHTAGS SUGERIDAS:
{hashtag_keywords}
#viral 
#engra√ßado 
#tiktok 
#comedia 
#humorbrasil

üí° DICAS DE PRODU√á√ÉO:
‚Ä¢ Use ilumina√ß√£o natural sempre que poss√≠vel
‚Ä¢ Mantenha edi√ß√£o r√°pida e din√¢mica (cortes a cada 2-3 segundos)
‚Ä¢ Adicione legendas claras e objetivas
‚Ä¢ Use transi√ß√µes criativas entre cenas
‚Ä¢ Teste o √°udio antes de gravar
‚Ä¢ Mantenha energia alta durante toda a grava√ß√£o
"""
        print("üîÅ Roteiro gerado em modo simulado")
        return script

# Criar inst√¢ncia global do servi√ßo
try:
    ai_service = AIService()
    print("‚úÖ Servi√ßo de IA inicializado com sucesso!")
except Exception as e:
    print(f"‚ùå Erro cr√≠tico ao inicializar servi√ßo de IA: {e}")
    # Fallback extremo
    class FallbackService:
        def generate_ideas(self, *args, **kwargs): 
            return [{
                "title": "Ideia Simulada - Modo Offline",
                "description": "Servi√ßo de IA n√£o dispon√≠vel. Verifique a conex√£o.",
                "hashtags": "#simulado #offline"
            }]
        def generate_script(self, *args, **kwargs): 
            return "Roteiro simulado - Servi√ßo de IA n√£o dispon√≠vel. Verifique sua conex√£o e chave API."
        def improve_idea(self, *args, **kwargs):
            return {
                "improved_title": "Modo Offline - Verifique a API",
                "improved_description": "Servi√ßo de IA indispon√≠vel",
                "improved_hashtags": "#offline #error"
            }
    ai_service = FallbackService()