import os
from flask import Flask, send_from_directory, jsonify, request
import sys
import os

# Adicionar o caminho do backend ao Python path
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend'))

app = Flask(__name__)

# Configura√ß√µes
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
FRONTEND_FOLDER = os.path.join(BASE_DIR, 'frontend')

# ‚úÖ Frontend routes
@app.route('/')
def serve_frontend():
    return send_from_directory(FRONTEND_FOLDER, 'index.html')

@app.route('/<path:path>')
def serve_static_files(path):
    if os.path.exists(os.path.join(FRONTEND_FOLDER, path)):
        return send_from_directory(FRONTEND_FOLDER, path)
    return send_from_directory(FRONTEND_FOLDER, 'index.html')

# ‚úÖ API routes directly here (no blueprint)
@app.route('/api/health')
def api_health():
    return jsonify({"status": "healthy", "message": "‚úÖ HelpubliAI OK!"})

@app.route('/api/generate-ideas', methods=['POST'])
def api_generate_ideas():
    try:
        data = request.get_json()
        
        if not data or 'niche' not in data or 'audience' not in data:
            return jsonify({"error": "Dados incompletos"}), 400
        
        niche = data['niche']
        audience = data['audience']
        count = data.get('count', 5)
        
        # Fallback - ideias simuladas (substituir pela integra√ß√£o real com IA)
        ideas = [
            {
                "title": f"Rea√ß√µes engra√ßadas a {niche}",
                "description": f"V√≠deo mostrando rea√ß√µes exageradas para {audience}",
                "hashtags": f"#{niche} #{audience} #humor #viral"
            },
            {
                "title": f"Desafio de {niche}",
                "description": f"Desafio divertido envolvendo {niche} para {audience}",
                "hashtags": f"#{niche} #{audience} #desafio #divertido"
            },
            {
                "title": f"Top 3 momentos de {niche}",
                "description": f"Compila√ß√£o dos melhores momentos para {audience}",
                "hashtags": f"#{niche} #{audience} #top3 #melhoresmomentos"
            }
        ]
        
        # Retornar apenas o n√∫mero solicitado de ideias
        ideas = ideas[:min(int(count), len(ideas))]
        
        return jsonify({
            "niche": niche,
            "audience": audience,
            "count": len(ideas),
            "ideas": ideas,
            "status": "success"
        })
        
    except Exception as e:
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500

@app.route('/api/generate-script', methods=['POST'])
def api_generate_script():
    try:
        data = request.get_json()
        
        if not data or 'idea' not in data:
            return jsonify({"error": "Ideia n√£o fornecida"}), 400
        
        idea = data['idea']
        
        # Fallback - roteiro simulado (substituir pela integra√ß√£o real com IA)
        script = f"""
üìù ROTEIRO DETALHADO PARA: {idea}

‚è∞ DURA√á√ÉO TOTAL: 20-25 segundos

üé¨ CEN√ÅRIO: Ambiente bem iluminado e casual

üéØ P√öBLICO: Jovens e adultos que apreciam conte√∫do engaging

‚è±Ô∏è  LINHA DO TEMPO:

[0-5 SEGUNDOS] - GANCHO INICIAL
‚Ä¢ Entrada impactante com express√£o facial exagerada
‚Ä¢ Texto na tela: "{idea}"
‚Ä¢ Efeito sonoro: "whoosh" para chamar aten√ß√£o

[5-15 SEGUNDOS] - DESENVOLVIMENTO
‚Ä¢ Progress√£o da hist√≥ria com cortes r√°pidos
‚Ä¢ 2-3 takes mostrando diferentes √¢ngulos
‚Ä¢ Mudan√ßas expressivas de rosto e linguagem corporal

[15-22 SEGUNDOS] - CL√çMAX
‚Ä¢ Momento mais engra√ßado da cena
‚Ä¢ Rea√ß√£o exagerada √† situa√ß√£o
‚Ä¢ Texto na tela: "O resultado üëÄ"

[22-25 SEGUNDOS] - FINAL E CHAMADA PARA A√á√ÉO
‚Ä¢ Resolu√ß√£o r√°pida e satisfat√≥ria
‚Ä¢ Olhar direto para c√¢mera com sorriso
‚Ä¢ Texto: "Compartilha se riu! ‚ù§Ô∏è"

üè∑Ô∏è  HASHTAGS SUGERIDAS:
#{idea.replace(' ', '').lower()} 
#viral 
#engra√ßado 
#tiktok 
#conteudooriginal
"""
        
        return jsonify({
            "idea": idea,
            "script": script,
            "status": "success"
        })
        
    except Exception as e:
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500

@app.route('/api/feedback', methods=['POST'])
def api_feedback():
    try:
        data = request.get_json()
        
        if not data or 'message' not in data:
            return jsonify({"error": "Mensagem n√£o fornecida"}), 400
        
        message = data['message']
        
        # Simular salvamento do feedback (em produ√ß√£o, salvaria em banco de dados)
        print(f"üìù Feedback recebido: {message}")
        
        return jsonify({
            "status": "success",
            "message": "Feedback recebido com sucesso!",
            "received_message": message
        })
        
    except Exception as e:
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500

@app.route('/api/statistics')
def api_statistics():
    """Endpoint para estat√≠sticas b√°sicas"""
    return jsonify({
        "status": "success",
        "statistics": {
            "total_ideas_generated": 0,  # Em produ√ß√£o, viria de um banco de dados
            "total_scripts_generated": 0,
            "active_users": 1,
            "system_status": "operational"
        }
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Servidor HelpubliAI iniciando na porta {port}...")
    print("üìç Frontend: http://localhost:5000")
    print("üîß API Health: http://localhost:5000/api/health")
    app.run(host='0.0.0.0', port=port, debug=False)